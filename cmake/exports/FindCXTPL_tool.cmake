################################################################################
# CXTPL_tool
################################################################################

# cached path to this file, forces refresh on each use
unset(FindCXTPL_tool_LIST_DIR CACHE)
set(FindCXTPL_tool_LIST_DIR
    "${CMAKE_CURRENT_LIST_DIR}"
    CACHE STRING "(autogenerated) path to FindCXTPL_tool.cmake")

# CXTPL_tool is enabled by default.
option(CXTPL_tool "Enable CXTPL_tool." ON)

if(CXTPL_tool)
  include(CMakeParseArguments)

  # Check if CXTPL_tool is installed with find_program.
  find_program(CXTPL_tool_PROGRAM CXTPL_tool
               HINTS ${CXTPL_tool_HINTS}
                     ${CXTPL_tool_DIR}/build/bin/
                     ${CXTPL_tool_PREFIX}/bin
                     /usr/bin
                     /usr/local/bin
                     $PATH
                     CMAKE_SYSTEM_PROGRAM_PATH)

  if(NOT CXTPL_tool_PROGRAM)
    message(WARNING "Program 'CXTPL_tool' not found, unable to run 'CXTPL_tool'.")
  endif(NOT CXTPL_tool_PROGRAM)

  # Define a function for enabling clang-tidy per target. The option above
  # makes this redundant, as it enables it for all targets already. This
  # could be used in combination with custom target commands or by
  # overriding the add_* commands with custom implementation.
  function(target_add_CXTPL_tool)
    # see https://cliutils.gitlab.io/modern-cmake/chapters/basics/functions.html
    set(options "")
    list(APPEND oneValueArgs
      TARGET
      GUID
      INPUTS_DIR
      OUTPUTS_DIR
      GENERATOR_PATH
      LOG_CONFIG
    )
    list(APPEND multiValueArgs
      INPUTS
      OUTPUTS
      EXTRA_ARGS
    )
    #
    cmake_parse_arguments(
      ARGUMENTS # prefix of output variables
      "${options}" # list of names of the boolean arguments (only defined ones will be true)
      "${oneValueArgs}" # list of names of mono-valued arguments
      "${multiValueArgs}" # list of names of multi-valued arguments (output variables are lists)
      ${ARGN} # arguments of the function to parse, here we take the all original ones
    )

    if(NOT ${ARGUMENTS_LOG_CONFIG} STREQUAL "")
      string(REPLACE " " ";" LOG_CONFIG "${ARGUMENTS_LOG_CONFIG}")
    else()
      set(LOG_CONFIG ".:=DBG9:default:console\;default=file:path=CXTPL_tool_for_${ARGUMENTS_TARGET}.log,async=true,sync_level=DBG9\;console=stream:stream=stderr")
    endif()

    if(NOT CXTPL_tool_PROGRAM)
      message(FATAL_ERROR "Program 'CXTPL_tool' not found, unable to run 'CXTPL_tool'.")
    endif(NOT CXTPL_tool_PROGRAM)

    set_source_files_properties(${ARGUMENTS_OUTPUTS} PROPERTIES GENERATED TRUE)

    string(REPLACE ";" " " INPUTS_as_string "${ARGUMENTS_INPUTS}")
    string(REPLACE ";" " " OUTPUTS_as_string "${ARGUMENTS_OUTPUTS}")
    string(REPLACE ";" " " CXTPL_EXTRA_ARGS_as_string "${ARGUMENTS_EXTRA_ARGS}")

    # NOTE: regen files at configure step
    execute_process(
      COMMAND
        ${CMAKE_COMMAND}
        -DCXTPL_tool_PROGRAM=${CXTPL_tool_PROGRAM}
        -DTHREADS=2
        -DINPUTS_DIR=${ARGUMENTS_INPUTS_DIR}
        -DOUTPUTS_DIR=${ARGUMENTS_OUTPUTS_DIR}
        -DGENERATOR_PATH=${ARGUMENTS_GENERATOR_PATH}
        -DINPUTS=${INPUTS_as_string}
        -DOUTPUTS=${OUTPUTS_as_string}
        -DCXTPL_EXTRA_ARGS=${CXTPL_EXTRA_ARGS_as_string}
        -DCXTPL_tool_LOG_CONFIG=${LOG_CONFIG}
        -P
        ${FindCXTPL_tool_LIST_DIR}/run_CXTPL_tool.cmake)

    # NOTE: regen files at build step
    add_custom_target(
      CXTPL_tool_target_for_${ARGUMENTS_TARGET}_${ARGUMENTS_GUID} ALL
      VERBATIM # If VERBATIM is given then all arguments to the commands will be escaped properly
      COMMAND
        ${CMAKE_COMMAND}
        -DCXTPL_tool_PROGRAM=${CXTPL_tool_PROGRAM}
        -DTHREADS=2
        -DINPUTS_DIR=${ARGUMENTS_INPUTS_DIR}
        -DOUTPUTS_DIR=${ARGUMENTS_OUTPUTS_DIR}
        -DGENERATOR_PATH=${ARGUMENTS_GENERATOR_PATH}
        -DINPUTS=${INPUTS_as_string}
        -DOUTPUTS=${OUTPUTS_as_string}
        -DCXTPL_EXTRA_ARGS=${CXTPL_EXTRA_ARGS_as_string}
        -DCXTPL_tool_LOG_CONFIG=${LOG_CONFIG}
        -P
        ${FindCXTPL_tool_LIST_DIR}/run_CXTPL_tool.cmake)

    add_dependencies(${ARGUMENTS_TARGET} CXTPL_tool_target_for_${ARGUMENTS_TARGET}_${ARGUMENTS_GUID})
  endfunction(target_add_CXTPL_tool)

endif(CXTPL_tool)
