[[~ // parameters begin

//const auto headerGuard
//  = GetWithDefault<std::string>(cxtpl_params, "headerGuard", "");
//
//const auto generator_path
//  = GetWithDefault<std::string>(cxtpl_params, "generator_path", "");
//
//std::vector<std::string> generator_includes
//  = GetWithDefault<std::vector<std::string>>
//      (cxtpl_params, "generator_includes", std::vector<std::string>{});
//
//reflection::ClassInfoPtr ReflectedBaseTypeclass
//  = GetWithDefault<reflection::ClassInfoPtr>
//      (cxtpl_params, "ReflectedBaseTypeclass", nullptr);
//
//std::string ImplTypeclassName
//  = GetWithDefault<std::string>
//      (cxtpl_params, "ImplTypeclassName", "");
//
//std::string BaseTypeclassName
//  = GetWithDefault<std::string>
//      (cxtpl_params, "BaseTypeclassName", "");

// parameters end
/* no newline */ ~]][[~]]
[[~]]     // start
[[~]] int fileNameIndex = 0;
[[~]] for(const auto& fileName: generator_includes) {
int some[[* fileNameIndex *]] = 3;
[[~]]   ++fileNameIndex;
[[~]] }

// ...

int someJ = 5;
[[~]]     // end
