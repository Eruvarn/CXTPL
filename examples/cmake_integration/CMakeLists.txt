cmake_minimum_required(VERSION 3.10.0 FATAL_ERROR)

# Building as separate project.
project(CXTPL_examples_cmake_integration)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

option(CXTPL_tool_CLEAN "clear old files generated by CXTPL" OFF)

set(CXTPL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../..")
list(APPEND CMAKE_MODULE_PATH ${CXTPL_DIR}/cmake/exports)

set(BOOST_ROOT CACHE STRING /usr)
set(Boost_ADDITIONAL_VERSIONS "1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69")
set(BOOST_LIBS CACHE STRING ${BOOST_ROOT}/lib)
find_package(Boost
             COMPONENTS program_options
                        filesystem
                        regex
                        date_time
                        system
                        thread
                        graph
                        log
             EXACT REQUIRED)

find_package(Threads REQUIRED)
message(STATUS "CMAKE_THREAD_LIBS_INIT = ${CMAKE_THREAD_LIBS_INIT}")

find_package(X11 REQUIRED)
message(STATUS "X11_LIBRARIES = ${X11_LIBRARIES}")

find_package(EXPAT REQUIRED)
message(STATUS "EXPAT_LIBRARIES = ${EXPAT_LIBRARIES}")

find_package(ZLIB REQUIRED)
message(STATUS "ZLIB_LIBRARIES = ${ZLIB_LIBRARIES}")

message(STATUS "CMAKE_DL_LIBS = ${CMAKE_DL_LIBS}")

# The project has one binary:
add_executable(CXTPL_examples_cmake_integration
               ${CMAKE_CURRENT_SOURCE_DIR}/src/main_native.cpp)

set(USED_SYSTEM_LIBS
    Threads::Threads # pthread, https://cmake.org/cmake/help/v3.13/module/FindThreads.html
    ${X11_LIBRARIES} # https://cmake.org/cmake/help/v3.13/module/FindX11.html
    ${CMAKE_DL_LIBS} # https://cmake.org/cmake/help/v3.13/variable/CMAKE_DL_LIBS.html
    EXPAT::EXPAT # https://cmake.org/cmake/help/v3.13/module/FindEXPAT.html
    ZLIB::ZLIB # https://cmake.org/cmake/help/v3.13/module/FindZLIB.html
               # Custom libs
    stdc++fs # C++17 std::filesystem
    CACHE INTERNAL "USED_SYSTEM_LIBS")

target_link_libraries(CXTPL_examples_cmake_integration
                      PUBLIC # system libs
                             ${USED_SYSTEM_LIBS}
                             # boost libs
                             ${USED_BOOST_LIBS} boost_outcome microsoft_gsl
                             double-conversion
                             # CXTPL
                             CXTPL_core ${LIBIBERTY_LIBRARY})

set(cxtpl_in_dir "${CMAKE_CURRENT_SOURCE_DIR}/resources/cxtpl")
set(cxtpl_out_dir "${CMAKE_CURRENT_SOURCE_DIR}/resources/cxtpl/generated")

if(CXTPL_tool_CLEAN)
  if(EXISTS ${cxtpl_out_dir})
    file(REMOVE_RECURSE ${cxtpl_out_dir})
  endif(EXISTS ${OUTDIR})
endif(CXTPL_tool_CLEAN)

target_include_directories(CXTPL_examples_cmake_integration
                           PUBLIC ${LIBIBERTY_INCLUDE_DIR}
                                  # path to `generated` folder
                                  "${cxtpl_out_dir}/..")

target_compile_options(CXTPL_examples_cmake_integration PRIVATE -frtti)

set_target_properties(CXTPL_examples_cmake_integration PROPERTIES ENABLE_EXPORTS 1)

find_package(CXTPL_tool REQUIRED)

list(APPEND cxtpl_inputs "${cxtpl_in_dir}/example_includes.cxtpl")

# generated files
list(APPEND cxtpl_outputs "${cxtpl_out_dir}/example_includes.cxtpl.cpp")

# create new codegen files for TARGET_NAME_HERE based on cxtpl_inputs and cxtpl_outputs
target_add_cxtpl_tool(CXTPL_examples_cmake_integration "cmake_integration"
                      "${cxtpl_inputs}" "${cxtpl_outputs}")

add_dependencies(CXTPL_examples_cmake_integration CXTPL_tool)
